package inClass;
import java.util.*;
import basic.Execute;

public class Manager extends Execute{
	private Scanner scan = new Scanner(System.in);
	private ArrayList<Student> ListStudents;
	
	public Manager() {
		this.ListStudents = new ArrayList<Student>();
	}
	
	// add student
	public void addStudent() {
		int key = 0;
		while (true) {
			echo ("===NEW STUDENT===\n");
			try {
				Student newStudent = inputStudent();
				ListStudents.add(newStudent);
				
				echo ("add success!\n1-Continue\t0-exit\n>");
				key = scan.nextInt();
				scan.nextLine();
				if (key == 0) {
					break;
				}
				
			} catch (Exception e) {
//				echo(e.getMessage());
//				e.printStackTrace();
				break;
			}
		}
	}
	
	public Student inputStudent() {
		String ClassName = inputName();
		float C = inputC();
		float PHP = inputPHP();
		
		return new Student(ClassName, C, PHP);
	}
	
	public String inputName() {
		echo ("Name >");
		String name = scan.nextLine();
		return name;
	}
	
	public int inputID() {
		echo ("ID >");
		int ID = scan.nextInt();
		scan.nextLine();
		return ID;
	}
	
	public float inputC() {
		echo ("C >");
		float C = scan.nextFloat();
		scan.nextLine();
		return C;
	}
	
	public float inputPHP() {
		echo ("PHP >");
		float PHP = scan.nextFloat();
		scan.nextLine();
		return PHP;
	}
	
	// edit student
	public void editStudent() {
		echo ("name or id >");
		String strForSearch = scan.nextLine();
		int[] listIndexsForEdit = returnIndexsOfStudent(strForSearch);
		boolean success = true;
		
		for (int i = 0; i < listIndexsForEdit.length; i++) {
			try {
				Student tmp = inputStudent();
				ListStudents.set(listIndexsForEdit[i], tmp);
			} catch (Exception e) {
				success = false;
				echo ("some error :((");
				break;
			}
		}
		
		if (success) {
			echo ("edit success !!!\n");
		}
	}
	
	
	// return index of student
	public int[] returnIndexsOfStudent(String strForSearch) {
		int ID = 0;
		String name = "";
		ArrayList<Integer> arrayListIndexs = new ArrayList<Integer>();
		
		if (isNumeric(strForSearch)) {
			try {
				ID = Integer.parseInt(strForSearch);
			} catch (Exception e) {
				name = formatString(strForSearch);
			}
		} else {
			name = formatString(strForSearch);
		}
		
		for (int i = 0; i < ListStudents.size(); i++) {
			if(ListStudents.get(i).getID() == ID || ListStudents.get(i).getName().trim().toLowerCase().equals(name)) {
				arrayListIndexs.add(i);
			}
		}
		
		return arrayListIndexs.stream().mapToInt(val -> val).toArray();
	}
	
	// string is numeric
	public static boolean isNumeric(String str) {
		if (str == null) {
			return false;
		}
		
		try {
			Double.parseDouble(str);
		} catch (Exception e) {
			return false;
		}
		
		return true;
	}
	
	// format String
	public String formatString(String str) {
		return str.trim().toLowerCase();
	}
	
	
	// show student
	public void showListStudent() {
		for (Student student : ListStudents) {
			student.showInfo();
		}
	}
}
